#!/bin/bash
#[of]:comments
#[c]steps
#[c]  flatten all includes
#[c]  remove comments and blank lines
#[c]  wrap in decompressor script
#[cf]
#[of]:functions
#[of]:base
##if using bash insure extglob is on
[[ -n "$BASH_VERSION" ]] && shopt -s extglob

#[of]:aset() {
aset() {
#[of]:  usage
  if false ; then
    echo "Usage: aset var [val val val ...]"
    echo "Error: must have at least 1 args"
    echo "Description:"
    echo "  sets a given array variable"
    echo "  this exist because, there is no common way of setting an array in ksh and bash"
    echo "Examples:"
    echo "  i.e.  aset gl_BusinessDays mon tue wed thu fri"
    echo "Returns:"
    echo "  0 success"
    exit 1
  fi
#[cf]
}
if [[ -n "$BASH_VERSION" ]] ; then
  aset() {
    eval "
      shift
      $1=(\"\$@\")
    "
  }
else
  aset() {
    eval "
      shift
      set -A $1 -- \"\$@\"
    "
  }
fi
#[cf]
#[of]:apush() {
apush() {
#[of]:  usage
  if [[ $# -eq 0 ]] ; then
    echo "Usage: apush {array} [val val val ...]"
    echo "Error: must have at least 2 args"
    echo "Description:"
    echo "  adds new element/s to the end of an array"
    echo "  this emulates the perl function unshift"
    echo "Examples:"
    echo '  i.e.  apush b "a string"'
    echo "Returns:"
    echo "  0 success"
    exit 1
  fi
#[cf]
  eval "
    shift
    aset $1 \"\${$1[@]}\" \"\$@\"
  "
}
#[cf]
#[of]:ashift() {
ashift() {
#[of]:  usage
  if [[ $# -ne 2 ]] ; then
    echo "Usage: ashift {!|-|var} {array}"
    echo "Error: must have at least 2 args"
    echo "Description:"
    echo "  shift an array 1 element left and return that element in var"
    echo "  this emulates the perl function shift"
    echo "Examples:"
    echo '  i.e.  ashift b a'
    echo "Returns:"
    echo "  0 success"
    exit 1
  fi
#[cf]
  eval "
    set -- \"\${$2[@]}\"
    if [[ \$# -gt 0 ]] ; then
      if [[ \"$1\" = \"!\" ]] ; then
        :
      elif [[ \"$1\" = \"-\" ]] ; then
        echo \"\$1\"
      else
        $1=\"\$1\"
      fi
      [[ \$# -gt 0 ]] && shift
      aset $2 \"\$@\"
    else
      return 1
    fi
  "
  return 0
}
#[cf]
#[of]:cleancat() {
cleancat() {
#[of]:  usage
  if [ $# -gt 1 ] ; then
    echo "Usage: cleancat [filename]|[redirect]"
    echo "Error: must have 0 or 1 argument"
    echo "Description: dumps a file or pipe removing blank lines and comments"
    echo "Examples:"
    echo '  cleancat ${lc_main_filename}'
    echo '  bigdataapp | cleancat'
    echo '  cleancat < echo "A Test String"'
    echo "Returns:"
    echo "  0 success"
    exit 1
  fi
#[cf]
  if [[ -n "$1" ]] ; then
    [[ ! -r "$1" ]] && die 1 "could not read file $1"
    grep -v -e "^[[:blank:]]*$" -e "^[[:blank:]]*#" "$1" 2>/dev/null
  else
    grep -v -e "^[[:blank:]]*$" -e "^[[:blank:]]*#" 2>/dev/null
  fi
}
#[cf]
#[of]:die() {
die() {
#[of]:  usage
  if false ; then
    echo 'Usage: die exitcode "message"'
    echo "Error: none"
    echo "Description: outputs messages to stderr and exits with exitcode"
    echo "  a quick way to kill a script"
    echo "Examples:"
    echo '  die 1 "this bit of code failed to do something"'
    echo "Returns:"
    echo "  1 or given exitcode"
    exit 1
  fi
#[cf]
  typeset lc_die_return lc_die_message
  if isnum "${1}" ; then
    lc_die_return=$1
    shift
  fi
  lc_die_message="$1"
  errorlevel ${lc_die_return:-1}
  msgdbg 0 "${lc_die_message:-no reason was given}"
  exit ${lc_die_return:-1}
}
#[cf]
#[of]:isset() {
isset() {
  eval "(( \${$1+1} ))"
}
#[cf]
#[of]:errorlevel() {
errorlevel() {
#[of]:  usage
  if false ; then
    echo "Usage: errorlevel [arg]"
    echo "Error: none"
    echo "Description:"
    echo "  this simply sets the desired errorlevel on return.  if arg is not a number it returns 0"
    echo "Examples:"
    echo '  i.e. errorlevel 7'
    echo "    sets errorlevel to 7"
    echo "Returns: 0 or arg"
    exit 1
  fi
#[cf]
  if [ -z "${1##*[a-zA-Z]*}" ] ; then
    return 0
  else
    return $1
  fi
}
#[cf]
#[of]:isnum() {
isnum() {
#[of]:  usage
  if false ; then
    echo "Usage: isnum arg"
    echo "Error: must have at least 1 argument"
    echo "Description: checks if arg is a number"
    echo "Examples:"
    echo '  "if isnum 50 ; then'
    echo '    echo is a number'
    echo '  else'
    echo '    echo is not a number'
    echo '  fi"'
    echo '  statement may also be negated'
    echo '    "if ! isnum 50 ; then"'
    echo "Returns:"
    echo "  0 true"
    echo "  1 false"
    exit 1
  fi
#[cf]
  #set IFS to a sane value
  typeset IFS=' 	
'
  if [[ "$1" == ?(+|-)+([0-9]) ]] ; then
   return 0
  fi
  return 1
}
#[cf]
#[of]:msgdbg() {
msgdbg() {
#[c]level message
  typeset lc_msgdbg_return=$?
  typeset lc_msgdbg_level lc_msgdbg_message
  lc_msgdbg_level="$1"
  lc_msgdbg_message="$2"
#[of]:  usage
  if [ -z "${lc_msgdbg_level##*[a-zA-Z]*}" -o -z "${lc_msgdbg_message}" ] ; then
    echo "Usage: msgdbg debuglevel message"
    echo "Error: debuglevel is not a number or message is missing"
    echo "Description: outputs messages to stdout based on debuglevel"
    echo "  used for debugging code as it is being built/tested"
    echo 'Examples: msgdbg 3 "this bit of code is doing something"'
    echo "  the message will only be seen if gl_debuglevel=3 or higher"
    echo "Returns: whatever errorlevel was before this function was called"
    exit 1
  fi
#[cf]
  if [ ${gl_debuglevel:-0} -ge ${lc_msgdbg_level} ] ; then
    printf "return=${lc_msgdbg_return:-0}  ${gl_funcname}:%s\n" "${lc_msgdbg_message}" >&2
  fi
  return ${lc_msgdbg_return}
}
#[cf]
#[cf]
#[of]:flatten() {
flatten() {
  (($#<2)) && return 1

  buffer1="$(grep -v '[[:blank:]]*#\[l\]' "$1")"
#[c]  declare -A gl_includes
  
  gl_pass=0
  while : ; do
    echo "pass $((++gl_pass))"
    buffer2="$(
      gl_line=0
      skipflag=0
      declare -A lc_varResolved
      while IFS=$'\n' read -r i;do
        ((gl_line++))
        if j="$(echo "${i}" | grep -m1 -oP '^[[:blank:]]*\K(\.|source|include) [[:graph:]]+')" ; then
#[of]:          debug to skip certain includes
#[c]        if echo "${i}" | grep -qP '(hash\.sclass|referenceid\.sclass|classcommonenv\.sh)' ; then
#[c]        if echo "${i}" | grep -qP '(classcommonenv\.sh)' ; then
#[c]          echo "${i}"
#[c]          echo "rh ${gl_line} ${i}" >&2
#[c]          continue
#[c]        fi

#[c]        if ((skipflag)) ; then
#[c]          echo "${i}"
#[c]          continue
#[c]        fi
#[c]        if echo "${i}" | grep -qP '(classcommonenv\.sh)' && [[ -n "${i##. \${d\}{*}" ]]  ; then
#[c]          skipflag=1
#[c]        fi
#[cf]
  
          i="${j}"
          {
            i="${i#\. }"
            i="${i#source }"
#[of]:            if [[ -z "${i##*\\${*}" ]] ; then
          if [[ -z "${i##*\${*}" ]] ; then
#[of]:            if [[ -z "${i##\\${d\\}{*}" ]] ; then
            if [[ -z "${i##\${q\}\$*}" ]] ; then
              echo ". ${i}"
              echo "aaa ${gl_line} . ${i}" >&2
            elif [[ -z "${i##\${d\}{*}" ]] ; then
              j=""
              while [[ "${i}" != "${j}" ]] ; do
                j="${i}"
                [[ -z "${i##\${d\}{*}" ]] && i="\$${i#\${d\}}"
                if [[ -z "${i##*\${*}" ]] ; then
                  v="${i#*\${}"
                  v="${v%%\}*}"
                  f="${i%\${${v}\}*}"
                  b="${i#*\${${v}\}}"
                  if isset lc_varResolved["${v}"] ; then
                    i="${f}${lc_varResolved["${v}"]}${b}"
                  else
                    if r="$(echo "${buffer1}" | grep -m1 -oP "^[[:blank:]]*${v}=[\"\']*\\K[^\"']+(?=[\"']*)")" ; then
                      lc_varResolved["${v}"]="${r}"
                      i="${f}${r}${b}"
                    elif  r="$(set | grep -m1 -oP "^[[:blank:]]*${v}=[\"\']*\\K[^\"']+(?=[\"']*)")" ; then
                      lc_varResolved["${v}"]="${r}"
                      i="${f}${r}${b}"
                    fi
                  fi
                fi
              done
              if [[ -n "${i##*\${*}" ]] ; then
                b="$(grep -v '^[[:blank:]]*#\[l\]' "${i}")"
                b="${b//\"/\\\"}"
                b="${b//\$/\\\$}"
                b="${b//\`/\\\`}"
                echo "${b}"
                echo "bbb escaped cat ${i}" >&2
              else
                echo ". ${i}"
                echo "ccc ${gl_line} . ${i}" >&2
              fi
#[cf]
#[of]:            else
            else
              v="${i#*\${}"
              v="${v%%\}*}"
              f="${i%\${${v}\}*}"
              b="${i#*\${${v}\}}"
              if isset lc_varResolved["${v}"] ; then
                echo ". ${f}${lc_varResolved["${v}"]}${b}"
                echo "ap ${gl_line} . ${f}${lc_varResolved["${v}"]}${b}" >&2
              else
                if r="$(echo "${buffer1}" | grep -m1 -oP "^[[:blank:]]*${v}=[\"\']*\\K[^\"']+(?=[\"']*)")" ; then
                  lc_varResolved["${v}"]="${r}"
                  echo ". ${f}${r}${b}"
                  echo "a ${gl_line} . ${f}${r}${b}" >&2
                elif  r="$(set | grep -m1 -oP "^[[:blank:]]*${v}=[\"\']*\\K[^\"']+(?=[\"']*)")" ; then
                  lc_varResolved["${v}"]="${r}"
                  echo ". ${f}${r}${b}"
                  echo "b ${gl_line} . ${f}${r}${b}" >&2
                else
                  echo ". ${i}"
                  echo "c ${gl_line} . ${i}" >&2
                fi
              fi
#[cf]
            fi
#[cf]
#[of]:            elif [[ -z "${i##include *}" ]] ; then
          elif [[ -z "${i##include *}" ]] ; then
            #multiplue includes of the same type need to be ignored
            i="${i#include }"
#[c]            if ! isset gl_includes["${i}"] ; then
              gl_includes["${i}"]=""
              i="${i%.sclass}"
              if [[ -n "${i##*/*}" ]] ; then
                echo ". \${gl_objectshbase}/sclass/${i}.sclass"
                echo "d ${gl_line} . \${gl_objectshbase}/sclass/${i}.sclass" >&2
              else
                grep -v '^[[:blank:]]*#\[l\]' ${i}.sclass
                echo "e ${gl_line} cat ${i}.sclass" >&2
               fi
#[c]            fi
#[cf]
#[of]:            else
          else
            grep -v '^[[:blank:]]*#\[l\]' "${i}"
            echo "f ${gl_line} cat ${i}" >&2
#[cf]
            fi
          }
        else
          echo "${i}"
        fi
      done < <(echo "${buffer1}")
    )"
    if [[ "${buffer1}" = "${buffer2}" ]] ; then
      echo "${buffer2}" > "$2"
      chmod 750 "$2"
      break
    fi
    buffer1="${buffer2}"
    echo
#[c]    echo "${buffer1}" > "${2%.bsh}${gl_pass}.bsh"
#[c]    chmod 750 "${2%.bsh}${gl_pass}.bsh"
#[c]    ((gl_pass>5)) && break
  done
  echo done
}
#[cf]
#[of]:compressAndWrap() {
compressAndWrap() {
  (($#<2)) && return 1

  IFS='' read -r -d '' gl_header <<'EOF'
#!/bin/bash

if [[ "$1" = "--dump-script" ]] ; then
  echo "$(cat "$0" | (while read -r i;do [ "${i}" = "#ENDOFCOMPRESSIONWRAPPER" ] && break;done;gunzip -c))"
  exit $?
else
  eval "$(cat "$0" | (while read -r i;do [ "${i}" = "#ENDOFCOMPRESSIONWRAPPER" ] && break;done;gunzip -c))"
  exit $?
fi
#ENDOFCOMPRESSIONWRAPPER
EOF
  
  echo -n "${gl_header}" > "$2"
  cleancat "$1" | gzip -9c >> "$2"
  chmod 750 "$2"
}
#[cf]
#[cf]
#[of]:parse command line
#[c]
#[c]write code to validate switches "a b c= name= on off".  if switch is not valid then die.
#[c]if in bash we can use a hash, else how else to do this check?
#[c]
#[c]this should be moved to base, because there may be many times the command line parsing
#[c]  code isn't wanted or just gets in the way.
#[c]
##process command line into gl_progargs format.  the actual command line is not touched unless a -- is encountered.
##
##sample command line
##  ./sample-prog-1.0.0.ksh -a -f part0 -c -d="once two" parta partb "part1 part2" -r=i=something
##produces the following variables
##    contains all arguments in one variable
##      gl_progargs='-a -f part0 -c -d=once two parta partb part1 part2 -r=i=something'
##
##    every switch found sets a variable named gl_progargs_{switchname} equal to "true"
##      gl_progargs_a=true
##      gl_progargs_c=true
##      gl_progargs_d=true
##      gl_progargs_f=true
##      gl_progargs_r=true
##
##    arguments not associated with a switch are placed in an array
##      gl_progargs_array=([0]="part0" [1]="parta" [2]="partb" [3]="part1 part2")
##
##    data attached to a switch is stored in a variable name gl_progargs_{switchname}_data
##      gl_progargs_d_data='once two'
##
##    the total count of arguments not associated with a switch
##      gl_progargs_datacount=4
##
##      gl_progargs_r_data=i=something
##    summary of all switches found
##      gl_progargs_switchcount=5
##      gl_progargs_switchlist='a f c d r'
##
##sample code
##  if ${gl_progargs_a:-false} ; then
##    echo "ask switch is set"
##  else
##    echo "ask switch is not set"
##  fi
##  
##  if ${gl_progargs_d:-false} ; then
##    echo "${gl_progargs_d_data}"
##  else
##    echo "d switch is not set"
##  fi
##  

##unset any variables prefexed with gl_progargs_
for lc_main_currentvar in $(set | sed -ne '/^gl_progargs_/s/=.*//p' ) ; do
  unset ${lc_main_currentvar}
done

##begin parsing command line
aset lc_main_args "$@"
while ashift lc_main_currentarg lc_main_args ; do
  if [[ -n "${lc_main_currentarg}" ]] ; then
    ##if current arg not empty and
    ##  begins with a - or --
    ##  it is a switch
    ##  switches must begin with a letter
    if [[ "${lc_main_currentarg%%=*}" = -?(-)@("\?"|+([[:alpha:]])*([[:alnum:]])) ]] ; then
      ##strip off leading - or --
      lc_main_currentarg="${lc_main_currentarg##-?(-)}"
      if [[ -z "${lc_main_currentarg##*=*}" ]] ; then
        ##if current arg is a switch and has data --- split arg by switchname and data
        lc_main_currentdata="${lc_main_currentarg#*=}"
        lc_main_currentarg="${lc_main_currentarg%%=*}"
        ##if currentarg = ? replace it with help
        [[ "${lc_main_currentarg}" = "\?" ]] && lc_main_currentarg=help
        ##save switch data into the variable gl_progargs_{switchname}_data
        eval "gl_progargs_${lc_main_currentarg}_data=\"\${lc_main_currentdata}\""
      fi
      ##if currentarg = ? replace it with help
      [[ "${lc_main_currentarg}" = "\?" ]] && lc_main_currentarg=help
      ##set switch state in gl_progargs_{switchname}=true
      eval "gl_progargs_${lc_main_currentarg}=\"true\""
      ##append switch into gl_progargs_switchlist
      gl_progargs_switchlist="${gl_progargs_switchlist}${gl_progargs_switchlist:+ }${lc_main_currentarg}"
      gl_progargs_switchcount=$(( ${gl_progargs_switchcount:-0} + 1 ))
    elif [[ -z "${lc_main_currentarg#--}" ]] ; then
      ##stop parsing command line and overwrite with remander of input
      set -- "${lc_main_args[@]}"
      break
    else
      ##if current arg is data --- append data into the array gl_progargs_array
      apush gl_progargs_array "${lc_main_currentarg}"
    fi
  fi
done
gl_progargs_datacount=${#gl_progargs_array[@]}
unset lc_main_args
unset lc_main_currentarg
unset lc_main_currentdata
#[cf]
#[of]:main
if [[ ${#gl_progargs_array[@]} = 0 ]] || [[ ${#gl_progargs_switchlist[@]} = 0 ]] ; then
  echo "Usage: $0 {-f|-s|-c} [-f] [-s] [-c] {inputfile}"
  echo "Error: must have at least 1 option and an input script to process"
  echo "Description:"
  echo "  flattens and/or strips and/or compress-wraps bash shell scripts"
  echo "Examples:"
  echo "  i.e.  $0 -f -s -c myBashScript"
  echo "Returns:"
  echo "  0 success"
  exit 1
fi

gl_fileInput="${gl_progargs_array[0]}"
gl_fileOutput="${gl_fileInput##*/}"

if ${gl_progargs_f:-false} ; then
  echo "start: flatten"
  gl_fileOutput="${gl_fileOutput}-flattend"
  flatten "${gl_fileInput}" "${gl_fileOutput}"
  gl_fileInput="${gl_fileOutput}"
  echo "  end: flatten"
fi

if ${gl_progargs_s:-false} ; then
  echo "start: strip"
  gl_fileOutput="${gl_fileOutput}-stripped"
  cleancat "${gl_fileInput}" > "${gl_fileOutput}"
  chmod 750 "${gl_fileOutput}"
  gl_fileInput="${gl_fileOutput}"
  echo "  end: strip"
fi

if ${gl_progargs_c:-false} ; then
  echo "start: compress-and-wrap"
  compressAndWrap "${gl_fileInput}" "${gl_fileOutput}-compresswrapped"
  echo "  end: compress-and-wrap"
fi

#[cf]
# vim:number:tabstop=2:shiftwidth=2:autoindent:foldmethod=marker:foldlevel=0:foldmarker=#[of]\:,#[cf]
